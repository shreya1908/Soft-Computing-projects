# -*- coding: utf-8 -*-
"""LSTM Stock Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GMdBOvb_7o-IE9fLm9LnBaK7bOnGv6v5
"""

from google.colab import drive
drive.mount('/content/drive')

#importing the required libraries
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,LSTM
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
ms = MinMaxScaler(feature_range=(0,1))
ms_new = MinMaxScaler(feature_range=(0,1))

#reading the dataset from the drive
dat = pd.read_csv('/content/drive/MyDrive/Deep Learning/NSE-Tata-Global-Beverages-Limited.csv')
dat

dat = np.array(dat['Close']).reshape(-1,1)
ms.fit(dat)
dat = ms.fit_transform(np.array(dat))
print(np.shape(dat))
dat

time_step = 60
X = np.zeros([np.shape(dat)[0]-time_step,time_step])
y = np.zeros([np.shape(dat)[0]-time_step])
for i in range(0,np.shape(dat)[0]-time_step):
  for j in range(i,i+time_step):
    X[i][j-i] = dat[j][0]
  y[i] = dat[i+time_step][0]

print(X)
print(np.shape(X))
print(y)
print(np.shape(y))

X_train = X[0:900,:]
X_test = X[900:1175,:]
y_train = y[0:900]
y_test = y[900:1175]

print(np.shape(X_train))
print(np.shape(X_test))
print(np.shape(y_train))
print(np.shape(y_test))

X_train = np.reshape(X_train,(np.shape(X_train)[0],np.shape(X_train)[1],1))
X_test = np.reshape(X_test,(np.shape(X_test)[0],np.shape(X_test)[1],1))
print(np.shape(X_train))
print(np.shape(X_test))

#creating the model
model=Sequential()

model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(rate = 0.2))

model.add(LSTM(units = 50, return_sequences = False))
model.add(Dropout(rate = 0.2))

model.add(Dense(25))
model.add(Dense(1))

model.compile(loss='mean_squared_error',optimizer='adam')

model.fit(X_train,y_train,epochs=1,batch_size=1,verbose=1)

train_pred = model.predict(X_train)
test_pred = model.predict(X_test)
train_pred = ms.inverse_transform(train_pred)
test_pred = ms.inverse_transform(test_pred)
print("Predicted train values are ---")
print(train_pred)
print("Predicted test values are ---")
print(test_pred)

print(np.shape(y_test))
y_test=y_test.reshape(-1,1)
print(np.shape(y_test))
y_test = ms.inverse_transform(y_test)
y_test

print(np.shape(y_train))
y_train=y_train.reshape(-1,1)
print(np.shape(y_train))
y_train = ms.inverse_transform(y_train)
y_train

from sklearn.metrics import mean_squared_error,r2_score
np.sqrt(np.mean(y_test-test_pred)**2)

from sklearn.metrics import mean_squared_error,r2_score
np.sqrt(np.mean(y_train-train_pred)**2)

import matplotlib.pyplot as plt
plt.plot(y_train,color='b')
plt.plot(train_pred,color='r')

plt.plot(y_test,color='y')
plt.plot(test_pred,color='g')

dat = pd.read_csv('/content/drive/MyDrive/Deep Learning/NSE-Tata-Global-Beverages-Limited.csv')
df = pd.DataFrame(dat)
df = df.drop(['Date'],axis=1)
df

ms.fit(df)
dat = ms.fit_transform(np.array(df))
print(np.shape(df))
ms_new.fit(np.reshape(np.array(df['Total Trade Quantity']),(-1,1)))
ms_new.fit_transform(np.reshape(np.array(df['Total Trade Quantity']),(-1,1)))
dat

X = np.zeros((1175,60,7))
y = []
print(np.shape(X))
for i in range(0,1175):
  for j in range(0,60):
    for k in range(0,7):
      X[i][j][k] = dat[i+j][k]
  y.append(dat[i+60][5])
print(np.shape(y))
print(y)
X

X_train = np.array(X[0:900,:,:])
X_test = np.array(X[900:1175,:,:])
y_train = np.array(y[0:900])
y_test = np.array(y[900:1175])

print(np.shape(X_train))
print(np.shape(X_test))
print(np.shape(y_train))
print(np.shape(y_test))

model=Sequential()

model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1],X_train.shape[2])))
model.add(Dropout(rate = 0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(rate = 0.2))

model.add(LSTM(units = 50, return_sequences = False))
model.add(Dropout(rate = 0.2))

model.add(Dense(25))
model.add(Dense(1))

model.compile(loss='mean_squared_error',optimizer='adam')

model.fit(X_train,y_train,epochs=30,batch_size=10,verbose=1)

train_pred = model.predict(X_train)
test_pred = model.predict(X_test)

train_pred = ms_new.inverse_transform(train_pred)
test_pred = ms_new.inverse_transform(test_pred)
print("Predicted train values are ---")
print(train_pred)
print("Predicted test values are ---")
print(test_pred)

y_test=y_test.reshape(-1,1)
print(np.shape(y_test))
y_test = ms_new.inverse_transform(y_test)
y_test

y_train=y_train.reshape(-1,1)
print(np.shape(y_train))
y_train = ms_new.inverse_transform(y_train)
y_train

from sklearn.metrics import mean_squared_error,r2_score
np.sqrt(np.mean(y_test-test_pred)**2)

from sklearn.metrics import mean_squared_error,r2_score
np.sqrt(np.mean(y_train-train_pred)**2)

r2_score(y_test,test_pred)

import matplotlib.pyplot as plt
plt.plot(y_train,color='b')
plt.plot(train_pred,color='r')

plt.plot(y_test,color='y')
plt.plot(test_pred,color='g')